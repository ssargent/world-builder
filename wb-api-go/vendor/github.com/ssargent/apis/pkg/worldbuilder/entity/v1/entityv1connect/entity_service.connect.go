// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: worldbuilder/entity/v1/entity_service.proto

package entityv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ssargent/apis/pkg/worldbuilder/entity/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EntityServiceName is the fully-qualified name of the EntityService service.
	EntityServiceName = "worldbuilder.entity.v1.EntityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EntityServiceGetEntityProcedure is the fully-qualified name of the EntityService's GetEntity RPC.
	EntityServiceGetEntityProcedure = "/worldbuilder.entity.v1.EntityService/GetEntity"
	// EntityServiceGetEntitiesProcedure is the fully-qualified name of the EntityService's GetEntities
	// RPC.
	EntityServiceGetEntitiesProcedure = "/worldbuilder.entity.v1.EntityService/GetEntities"
	// EntityServiceCreateTypeProcedure is the fully-qualified name of the EntityService's CreateType
	// RPC.
	EntityServiceCreateTypeProcedure = "/worldbuilder.entity.v1.EntityService/CreateType"
)

// EntityServiceClient is a client for the worldbuilder.entity.v1.EntityService service.
type EntityServiceClient interface {
	GetEntity(context.Context, *connect_go.Request[v1.GetEntityRequest]) (*connect_go.Response[v1.GetEntityResponse], error)
	GetEntities(context.Context, *connect_go.Request[v1.GetEntitiesRequest]) (*connect_go.Response[v1.GetEntitiesResponse], error)
	CreateType(context.Context, *connect_go.Request[v1.CreateTypeRequest]) (*connect_go.Response[v1.CreateTypeResponse], error)
}

// NewEntityServiceClient constructs a client for the worldbuilder.entity.v1.EntityService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEntityServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EntityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &entityServiceClient{
		getEntity: connect_go.NewClient[v1.GetEntityRequest, v1.GetEntityResponse](
			httpClient,
			baseURL+EntityServiceGetEntityProcedure,
			opts...,
		),
		getEntities: connect_go.NewClient[v1.GetEntitiesRequest, v1.GetEntitiesResponse](
			httpClient,
			baseURL+EntityServiceGetEntitiesProcedure,
			opts...,
		),
		createType: connect_go.NewClient[v1.CreateTypeRequest, v1.CreateTypeResponse](
			httpClient,
			baseURL+EntityServiceCreateTypeProcedure,
			opts...,
		),
	}
}

// entityServiceClient implements EntityServiceClient.
type entityServiceClient struct {
	getEntity   *connect_go.Client[v1.GetEntityRequest, v1.GetEntityResponse]
	getEntities *connect_go.Client[v1.GetEntitiesRequest, v1.GetEntitiesResponse]
	createType  *connect_go.Client[v1.CreateTypeRequest, v1.CreateTypeResponse]
}

// GetEntity calls worldbuilder.entity.v1.EntityService.GetEntity.
func (c *entityServiceClient) GetEntity(ctx context.Context, req *connect_go.Request[v1.GetEntityRequest]) (*connect_go.Response[v1.GetEntityResponse], error) {
	return c.getEntity.CallUnary(ctx, req)
}

// GetEntities calls worldbuilder.entity.v1.EntityService.GetEntities.
func (c *entityServiceClient) GetEntities(ctx context.Context, req *connect_go.Request[v1.GetEntitiesRequest]) (*connect_go.Response[v1.GetEntitiesResponse], error) {
	return c.getEntities.CallUnary(ctx, req)
}

// CreateType calls worldbuilder.entity.v1.EntityService.CreateType.
func (c *entityServiceClient) CreateType(ctx context.Context, req *connect_go.Request[v1.CreateTypeRequest]) (*connect_go.Response[v1.CreateTypeResponse], error) {
	return c.createType.CallUnary(ctx, req)
}

// EntityServiceHandler is an implementation of the worldbuilder.entity.v1.EntityService service.
type EntityServiceHandler interface {
	GetEntity(context.Context, *connect_go.Request[v1.GetEntityRequest]) (*connect_go.Response[v1.GetEntityResponse], error)
	GetEntities(context.Context, *connect_go.Request[v1.GetEntitiesRequest]) (*connect_go.Response[v1.GetEntitiesResponse], error)
	CreateType(context.Context, *connect_go.Request[v1.CreateTypeRequest]) (*connect_go.Response[v1.CreateTypeResponse], error)
}

// NewEntityServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEntityServiceHandler(svc EntityServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	entityServiceGetEntityHandler := connect_go.NewUnaryHandler(
		EntityServiceGetEntityProcedure,
		svc.GetEntity,
		opts...,
	)
	entityServiceGetEntitiesHandler := connect_go.NewUnaryHandler(
		EntityServiceGetEntitiesProcedure,
		svc.GetEntities,
		opts...,
	)
	entityServiceCreateTypeHandler := connect_go.NewUnaryHandler(
		EntityServiceCreateTypeProcedure,
		svc.CreateType,
		opts...,
	)
	return "/worldbuilder.entity.v1.EntityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EntityServiceGetEntityProcedure:
			entityServiceGetEntityHandler.ServeHTTP(w, r)
		case EntityServiceGetEntitiesProcedure:
			entityServiceGetEntitiesHandler.ServeHTTP(w, r)
		case EntityServiceCreateTypeProcedure:
			entityServiceCreateTypeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEntityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEntityServiceHandler struct{}

func (UnimplementedEntityServiceHandler) GetEntity(context.Context, *connect_go.Request[v1.GetEntityRequest]) (*connect_go.Response[v1.GetEntityResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("worldbuilder.entity.v1.EntityService.GetEntity is not implemented"))
}

func (UnimplementedEntityServiceHandler) GetEntities(context.Context, *connect_go.Request[v1.GetEntitiesRequest]) (*connect_go.Response[v1.GetEntitiesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("worldbuilder.entity.v1.EntityService.GetEntities is not implemented"))
}

func (UnimplementedEntityServiceHandler) CreateType(context.Context, *connect_go.Request[v1.CreateTypeRequest]) (*connect_go.Response[v1.CreateTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("worldbuilder.entity.v1.EntityService.CreateType is not implemented"))
}
