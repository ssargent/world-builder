// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: worldbuilder/entity/v1/entity_service.proto

package entityv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EntityService_GetEntity_FullMethodName   = "/worldbuilder.entity.v1.EntityService/GetEntity"
	EntityService_GetEntities_FullMethodName = "/worldbuilder.entity.v1.EntityService/GetEntities"
	EntityService_CreateType_FullMethodName  = "/worldbuilder.entity.v1.EntityService/CreateType"
)

// EntityServiceClient is the client API for EntityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityServiceClient interface {
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	GetEntities(ctx context.Context, in *GetEntitiesRequest, opts ...grpc.CallOption) (*GetEntitiesResponse, error)
	CreateType(ctx context.Context, in *CreateTypeRequest, opts ...grpc.CallOption) (*CreateTypeResponse, error)
}

type entityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityServiceClient(cc grpc.ClientConnInterface) EntityServiceClient {
	return &entityServiceClient{cc}
}

func (c *entityServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	out := new(GetEntityResponse)
	err := c.cc.Invoke(ctx, EntityService_GetEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetEntities(ctx context.Context, in *GetEntitiesRequest, opts ...grpc.CallOption) (*GetEntitiesResponse, error) {
	out := new(GetEntitiesResponse)
	err := c.cc.Invoke(ctx, EntityService_GetEntities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) CreateType(ctx context.Context, in *CreateTypeRequest, opts ...grpc.CallOption) (*CreateTypeResponse, error) {
	out := new(CreateTypeResponse)
	err := c.cc.Invoke(ctx, EntityService_CreateType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityServiceServer is the server API for EntityService service.
// All implementations must embed UnimplementedEntityServiceServer
// for forward compatibility
type EntityServiceServer interface {
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	GetEntities(context.Context, *GetEntitiesRequest) (*GetEntitiesResponse, error)
	CreateType(context.Context, *CreateTypeRequest) (*CreateTypeResponse, error)
	mustEmbedUnimplementedEntityServiceServer()
}

// UnimplementedEntityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEntityServiceServer struct {
}

func (UnimplementedEntityServiceServer) GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedEntityServiceServer) GetEntities(context.Context, *GetEntitiesRequest) (*GetEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntities not implemented")
}
func (UnimplementedEntityServiceServer) CreateType(context.Context, *CreateTypeRequest) (*CreateTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateType not implemented")
}
func (UnimplementedEntityServiceServer) mustEmbedUnimplementedEntityServiceServer() {}

// UnsafeEntityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityServiceServer will
// result in compilation errors.
type UnsafeEntityServiceServer interface {
	mustEmbedUnimplementedEntityServiceServer()
}

func RegisterEntityServiceServer(s grpc.ServiceRegistrar, srv EntityServiceServer) {
	s.RegisterService(&EntityService_ServiceDesc, srv)
}

func _EntityService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_GetEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_GetEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetEntities(ctx, req.(*GetEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_CreateType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).CreateType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_CreateType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).CreateType(ctx, req.(*CreateTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityService_ServiceDesc is the grpc.ServiceDesc for EntityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worldbuilder.entity.v1.EntityService",
	HandlerType: (*EntityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntity",
			Handler:    _EntityService_GetEntity_Handler,
		},
		{
			MethodName: "GetEntities",
			Handler:    _EntityService_GetEntities_Handler,
		},
		{
			MethodName: "CreateType",
			Handler:    _EntityService_CreateType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worldbuilder/entity/v1/entity_service.proto",
}
