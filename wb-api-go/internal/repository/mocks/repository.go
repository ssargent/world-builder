// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	uuid "github.com/google/uuid"
	sqlx "github.com/jmoiron/sqlx"
	repository "github.com/ssargent/world-builder/wb-api-go/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Transaction mocks base method.
func (m *MockManager) Transaction(ctx context.Context, db repository.WriterDB, opts *sql.TxOptions) (repository.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, db, opts)
	ret0, _ := ret[0].(repository.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transaction indicates an expected call of Transaction.
func (mr *MockManagerMockRecorder) Transaction(ctx, db, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockManager)(nil).Transaction), ctx, db, opts)
}

// MockWriterDB is a mock of WriterDB interface.
type MockWriterDB struct {
	ctrl     *gomock.Controller
	recorder *MockWriterDBMockRecorder
}

// MockWriterDBMockRecorder is the mock recorder for MockWriterDB.
type MockWriterDBMockRecorder struct {
	mock *MockWriterDB
}

// NewMockWriterDB creates a new mock instance.
func NewMockWriterDB(ctrl *gomock.Controller) *MockWriterDB {
	mock := &MockWriterDB{ctrl: ctrl}
	mock.recorder = &MockWriterDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriterDB) EXPECT() *MockWriterDBMockRecorder {
	return m.recorder
}

// BeginTxx mocks base method.
func (m *MockWriterDB) BeginTxx(ctx context.Context, opts *sql.TxOptions) (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTxx", ctx, opts)
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTxx indicates an expected call of BeginTxx.
func (mr *MockWriterDBMockRecorder) BeginTxx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTxx", reflect.TypeOf((*MockWriterDB)(nil).BeginTxx), ctx, opts)
}

// ExecContext mocks base method.
func (m *MockWriterDB) ExecContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockWriterDBMockRecorder) ExecContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockWriterDB)(nil).ExecContext), varargs...)
}

// PrepareContext mocks base method.
func (m *MockWriterDB) PrepareContext(arg0 context.Context, arg1 string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", arg0, arg1)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MockWriterDBMockRecorder) PrepareContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockWriterDB)(nil).PrepareContext), arg0, arg1)
}

// QueryContext mocks base method.
func (m *MockWriterDB) QueryContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockWriterDBMockRecorder) QueryContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockWriterDB)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockWriterDB) QueryRowContext(arg0 context.Context, arg1 string, arg2 ...interface{}) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockWriterDBMockRecorder) QueryRowContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockWriterDB)(nil).QueryRowContext), varargs...)
}

// MockReaderDB is a mock of ReaderDB interface.
type MockReaderDB struct {
	ctrl     *gomock.Controller
	recorder *MockReaderDBMockRecorder
}

// MockReaderDBMockRecorder is the mock recorder for MockReaderDB.
type MockReaderDBMockRecorder struct {
	mock *MockReaderDB
}

// NewMockReaderDB creates a new mock instance.
func NewMockReaderDB(ctrl *gomock.Controller) *MockReaderDB {
	mock := &MockReaderDB{ctrl: ctrl}
	mock.recorder = &MockReaderDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReaderDB) EXPECT() *MockReaderDBMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockReaderDB) ExecContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockReaderDBMockRecorder) ExecContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockReaderDB)(nil).ExecContext), varargs...)
}

// PrepareContext mocks base method.
func (m *MockReaderDB) PrepareContext(arg0 context.Context, arg1 string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", arg0, arg1)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MockReaderDBMockRecorder) PrepareContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockReaderDB)(nil).PrepareContext), arg0, arg1)
}

// QueryContext mocks base method.
func (m *MockReaderDB) QueryContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockReaderDBMockRecorder) QueryContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockReaderDB)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockReaderDB) QueryRowContext(arg0 context.Context, arg1 string, arg2 ...interface{}) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockReaderDBMockRecorder) QueryRowContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockReaderDB)(nil).QueryRowContext), varargs...)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit))
}

// ExecContext mocks base method.
func (m *MockTransaction) ExecContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockTransactionMockRecorder) ExecContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockTransaction)(nil).ExecContext), varargs...)
}

// PrepareContext mocks base method.
func (m *MockTransaction) PrepareContext(arg0 context.Context, arg1 string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", arg0, arg1)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MockTransactionMockRecorder) PrepareContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockTransaction)(nil).PrepareContext), arg0, arg1)
}

// QueryContext mocks base method.
func (m *MockTransaction) QueryContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockTransactionMockRecorder) QueryContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockTransaction)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockTransaction) QueryRowContext(arg0 context.Context, arg1 string, arg2 ...interface{}) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockTransactionMockRecorder) QueryRowContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockTransaction)(nil).QueryRowContext), varargs...)
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback))
}

// MockAttributeDefinitionQuerier is a mock of AttributeDefinitionQuerier interface.
type MockAttributeDefinitionQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockAttributeDefinitionQuerierMockRecorder
}

// MockAttributeDefinitionQuerierMockRecorder is the mock recorder for MockAttributeDefinitionQuerier.
type MockAttributeDefinitionQuerierMockRecorder struct {
	mock *MockAttributeDefinitionQuerier
}

// NewMockAttributeDefinitionQuerier creates a new mock instance.
func NewMockAttributeDefinitionQuerier(ctrl *gomock.Controller) *MockAttributeDefinitionQuerier {
	mock := &MockAttributeDefinitionQuerier{ctrl: ctrl}
	mock.recorder = &MockAttributeDefinitionQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttributeDefinitionQuerier) EXPECT() *MockAttributeDefinitionQuerierMockRecorder {
	return m.recorder
}

// CreateAttributeDefinition mocks base method.
func (m *MockAttributeDefinitionQuerier) CreateAttributeDefinition(ctx context.Context, db repository.DBTX, arg *repository.CreateAttributeDefinitionParams) (*repository.WorldAttributeDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttributeDefinition", ctx, db, arg)
	ret0, _ := ret[0].(*repository.WorldAttributeDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttributeDefinition indicates an expected call of CreateAttributeDefinition.
func (mr *MockAttributeDefinitionQuerierMockRecorder) CreateAttributeDefinition(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttributeDefinition", reflect.TypeOf((*MockAttributeDefinitionQuerier)(nil).CreateAttributeDefinition), ctx, db, arg)
}

// GetAttributesForType mocks base method.
func (m *MockAttributeDefinitionQuerier) GetAttributesForType(ctx context.Context, db repository.DBTX, typeID uuid.UUID) ([]*repository.WorldAttributeDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributesForType", ctx, db, typeID)
	ret0, _ := ret[0].([]*repository.WorldAttributeDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributesForType indicates an expected call of GetAttributesForType.
func (mr *MockAttributeDefinitionQuerierMockRecorder) GetAttributesForType(ctx, db, typeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributesForType", reflect.TypeOf((*MockAttributeDefinitionQuerier)(nil).GetAttributesForType), ctx, db, typeID)
}

// MockEntityQuerier is a mock of EntityQuerier interface.
type MockEntityQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockEntityQuerierMockRecorder
}

// MockEntityQuerierMockRecorder is the mock recorder for MockEntityQuerier.
type MockEntityQuerierMockRecorder struct {
	mock *MockEntityQuerier
}

// NewMockEntityQuerier creates a new mock instance.
func NewMockEntityQuerier(ctrl *gomock.Controller) *MockEntityQuerier {
	mock := &MockEntityQuerier{ctrl: ctrl}
	mock.recorder = &MockEntityQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityQuerier) EXPECT() *MockEntityQuerierMockRecorder {
	return m.recorder
}

// CreateEntity mocks base method.
func (m *MockEntityQuerier) CreateEntity(ctx context.Context, db repository.DBTX, arg *repository.CreateEntityParams) (*repository.WorldEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntity", ctx, db, arg)
	ret0, _ := ret[0].(*repository.WorldEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntity indicates an expected call of CreateEntity.
func (mr *MockEntityQuerierMockRecorder) CreateEntity(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntity", reflect.TypeOf((*MockEntityQuerier)(nil).CreateEntity), ctx, db, arg)
}

// GetEntitiesByCriteria mocks base method.
func (m *MockEntityQuerier) GetEntitiesByCriteria(ctx context.Context, db repository.DBTX, arg *repository.GetEntitiesByCriteriaParams) ([]*repository.WorldEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntitiesByCriteria", ctx, db, arg)
	ret0, _ := ret[0].([]*repository.WorldEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntitiesByCriteria indicates an expected call of GetEntitiesByCriteria.
func (mr *MockEntityQuerierMockRecorder) GetEntitiesByCriteria(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntitiesByCriteria", reflect.TypeOf((*MockEntityQuerier)(nil).GetEntitiesByCriteria), ctx, db, arg)
}

// GetEntitiesByParent mocks base method.
func (m *MockEntityQuerier) GetEntitiesByParent(ctx context.Context, db repository.DBTX, parentID uuid.UUID) ([]*repository.WorldEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntitiesByParent", ctx, db, parentID)
	ret0, _ := ret[0].([]*repository.WorldEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntitiesByParent indicates an expected call of GetEntitiesByParent.
func (mr *MockEntityQuerierMockRecorder) GetEntitiesByParent(ctx, db, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntitiesByParent", reflect.TypeOf((*MockEntityQuerier)(nil).GetEntitiesByParent), ctx, db, parentID)
}

// GetEntitiesByWBRN mocks base method.
func (m *MockEntityQuerier) GetEntitiesByWBRN(ctx context.Context, db repository.DBTX, wbrn string) ([]*repository.WorldEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntitiesByWBRN", ctx, db, wbrn)
	ret0, _ := ret[0].([]*repository.WorldEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntitiesByWBRN indicates an expected call of GetEntitiesByWBRN.
func (mr *MockEntityQuerierMockRecorder) GetEntitiesByWBRN(ctx, db, wbrn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntitiesByWBRN", reflect.TypeOf((*MockEntityQuerier)(nil).GetEntitiesByWBRN), ctx, db, wbrn)
}

// GetEntity mocks base method.
func (m *MockEntityQuerier) GetEntity(ctx context.Context, db repository.DBTX, id uuid.UUID) (*repository.WorldEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity", ctx, db, id)
	ret0, _ := ret[0].(*repository.WorldEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntity indicates an expected call of GetEntity.
func (mr *MockEntityQuerierMockRecorder) GetEntity(ctx, db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockEntityQuerier)(nil).GetEntity), ctx, db, id)
}

// GetEntityByWBRN mocks base method.
func (m *MockEntityQuerier) GetEntityByWBRN(ctx context.Context, db repository.DBTX, wbrn string) (*repository.WorldEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityByWBRN", ctx, db, wbrn)
	ret0, _ := ret[0].(*repository.WorldEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByWBRN indicates an expected call of GetEntityByWBRN.
func (mr *MockEntityQuerierMockRecorder) GetEntityByWBRN(ctx, db, wbrn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByWBRN", reflect.TypeOf((*MockEntityQuerier)(nil).GetEntityByWBRN), ctx, db, wbrn)
}

// MockEntityAssociationQuerier is a mock of EntityAssociationQuerier interface.
type MockEntityAssociationQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockEntityAssociationQuerierMockRecorder
}

// MockEntityAssociationQuerierMockRecorder is the mock recorder for MockEntityAssociationQuerier.
type MockEntityAssociationQuerierMockRecorder struct {
	mock *MockEntityAssociationQuerier
}

// NewMockEntityAssociationQuerier creates a new mock instance.
func NewMockEntityAssociationQuerier(ctrl *gomock.Controller) *MockEntityAssociationQuerier {
	mock := &MockEntityAssociationQuerier{ctrl: ctrl}
	mock.recorder = &MockEntityAssociationQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityAssociationQuerier) EXPECT() *MockEntityAssociationQuerierMockRecorder {
	return m.recorder
}

// CreateEntityAssociation mocks base method.
func (m *MockEntityAssociationQuerier) CreateEntityAssociation(ctx context.Context, db repository.DBTX, arg *repository.CreateEntityAssociationParams) (*repository.WorldEntityAssociation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntityAssociation", ctx, db, arg)
	ret0, _ := ret[0].(*repository.WorldEntityAssociation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntityAssociation indicates an expected call of CreateEntityAssociation.
func (mr *MockEntityAssociationQuerierMockRecorder) CreateEntityAssociation(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntityAssociation", reflect.TypeOf((*MockEntityAssociationQuerier)(nil).CreateEntityAssociation), ctx, db, arg)
}

// GetEntityAssociationsForEntity mocks base method.
func (m *MockEntityAssociationQuerier) GetEntityAssociationsForEntity(ctx context.Context, db repository.DBTX, entityOne uuid.UUID) ([]*repository.WorldEntityAssociation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityAssociationsForEntity", ctx, db, entityOne)
	ret0, _ := ret[0].([]*repository.WorldEntityAssociation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityAssociationsForEntity indicates an expected call of GetEntityAssociationsForEntity.
func (mr *MockEntityAssociationQuerierMockRecorder) GetEntityAssociationsForEntity(ctx, db, entityOne interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityAssociationsForEntity", reflect.TypeOf((*MockEntityAssociationQuerier)(nil).GetEntityAssociationsForEntity), ctx, db, entityOne)
}

// MockEntityHistoryQuerier is a mock of EntityHistoryQuerier interface.
type MockEntityHistoryQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockEntityHistoryQuerierMockRecorder
}

// MockEntityHistoryQuerierMockRecorder is the mock recorder for MockEntityHistoryQuerier.
type MockEntityHistoryQuerierMockRecorder struct {
	mock *MockEntityHistoryQuerier
}

// NewMockEntityHistoryQuerier creates a new mock instance.
func NewMockEntityHistoryQuerier(ctrl *gomock.Controller) *MockEntityHistoryQuerier {
	mock := &MockEntityHistoryQuerier{ctrl: ctrl}
	mock.recorder = &MockEntityHistoryQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityHistoryQuerier) EXPECT() *MockEntityHistoryQuerierMockRecorder {
	return m.recorder
}

// CreateEntityHistory mocks base method.
func (m *MockEntityHistoryQuerier) CreateEntityHistory(ctx context.Context, db repository.DBTX, arg *repository.CreateEntityHistoryParams) (*repository.WorldEntityHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntityHistory", ctx, db, arg)
	ret0, _ := ret[0].(*repository.WorldEntityHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntityHistory indicates an expected call of CreateEntityHistory.
func (mr *MockEntityHistoryQuerierMockRecorder) CreateEntityHistory(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntityHistory", reflect.TypeOf((*MockEntityHistoryQuerier)(nil).CreateEntityHistory), ctx, db, arg)
}

// GetEntityHistory mocks base method.
func (m *MockEntityHistoryQuerier) GetEntityHistory(ctx context.Context, db repository.DBTX, entityID uuid.UUID) ([]*repository.WorldEntityHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityHistory", ctx, db, entityID)
	ret0, _ := ret[0].([]*repository.WorldEntityHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityHistory indicates an expected call of GetEntityHistory.
func (mr *MockEntityHistoryQuerierMockRecorder) GetEntityHistory(ctx, db, entityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityHistory", reflect.TypeOf((*MockEntityHistoryQuerier)(nil).GetEntityHistory), ctx, db, entityID)
}

// MockTypeQuerier is a mock of TypeQuerier interface.
type MockTypeQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockTypeQuerierMockRecorder
}

// MockTypeQuerierMockRecorder is the mock recorder for MockTypeQuerier.
type MockTypeQuerierMockRecorder struct {
	mock *MockTypeQuerier
}

// NewMockTypeQuerier creates a new mock instance.
func NewMockTypeQuerier(ctrl *gomock.Controller) *MockTypeQuerier {
	mock := &MockTypeQuerier{ctrl: ctrl}
	mock.recorder = &MockTypeQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypeQuerier) EXPECT() *MockTypeQuerierMockRecorder {
	return m.recorder
}

// CreateType mocks base method.
func (m *MockTypeQuerier) CreateType(ctx context.Context, db repository.DBTX, arg *repository.CreateTypeParams) (*repository.WorldType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateType", ctx, db, arg)
	ret0, _ := ret[0].(*repository.WorldType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateType indicates an expected call of CreateType.
func (mr *MockTypeQuerierMockRecorder) CreateType(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateType", reflect.TypeOf((*MockTypeQuerier)(nil).CreateType), ctx, db, arg)
}

// CreateTypeAttribute mocks base method.
func (m *MockTypeQuerier) CreateTypeAttribute(ctx context.Context, db repository.DBTX, arg *repository.CreateTypeAttributeParams) (*repository.WorldTypeAttribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTypeAttribute", ctx, db, arg)
	ret0, _ := ret[0].(*repository.WorldTypeAttribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTypeAttribute indicates an expected call of CreateTypeAttribute.
func (mr *MockTypeQuerierMockRecorder) CreateTypeAttribute(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTypeAttribute", reflect.TypeOf((*MockTypeQuerier)(nil).CreateTypeAttribute), ctx, db, arg)
}

// GetTypeByID mocks base method.
func (m *MockTypeQuerier) GetTypeByID(ctx context.Context, db repository.DBTX, id uuid.UUID) (*repository.WorldType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypeByID", ctx, db, id)
	ret0, _ := ret[0].(*repository.WorldType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTypeByID indicates an expected call of GetTypeByID.
func (mr *MockTypeQuerierMockRecorder) GetTypeByID(ctx, db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypeByID", reflect.TypeOf((*MockTypeQuerier)(nil).GetTypeByID), ctx, db, id)
}

// GetTypeByWBTN mocks base method.
func (m *MockTypeQuerier) GetTypeByWBTN(ctx context.Context, db repository.DBTX, wbtn string) (*repository.WorldType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypeByWBTN", ctx, db, wbtn)
	ret0, _ := ret[0].(*repository.WorldType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTypeByWBTN indicates an expected call of GetTypeByWBTN.
func (mr *MockTypeQuerierMockRecorder) GetTypeByWBTN(ctx, db, wbtn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypeByWBTN", reflect.TypeOf((*MockTypeQuerier)(nil).GetTypeByWBTN), ctx, db, wbtn)
}

// MockEntityAttributeQuerier is a mock of EntityAttributeQuerier interface.
type MockEntityAttributeQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockEntityAttributeQuerierMockRecorder
}

// MockEntityAttributeQuerierMockRecorder is the mock recorder for MockEntityAttributeQuerier.
type MockEntityAttributeQuerierMockRecorder struct {
	mock *MockEntityAttributeQuerier
}

// NewMockEntityAttributeQuerier creates a new mock instance.
func NewMockEntityAttributeQuerier(ctrl *gomock.Controller) *MockEntityAttributeQuerier {
	mock := &MockEntityAttributeQuerier{ctrl: ctrl}
	mock.recorder = &MockEntityAttributeQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityAttributeQuerier) EXPECT() *MockEntityAttributeQuerierMockRecorder {
	return m.recorder
}

// GetAttributeByWBATN mocks base method.
func (m *MockEntityAttributeQuerier) GetAttributeByWBATN(ctx context.Context, db repository.DBTX, wbatn string) (*repository.WorldAttributeDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributeByWBATN", ctx, db, wbatn)
	ret0, _ := ret[0].(*repository.WorldAttributeDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributeByWBATN indicates an expected call of GetAttributeByWBATN.
func (mr *MockEntityAttributeQuerierMockRecorder) GetAttributeByWBATN(ctx, db, wbatn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributeByWBATN", reflect.TypeOf((*MockEntityAttributeQuerier)(nil).GetAttributeByWBATN), ctx, db, wbatn)
}

// GetEntityAttributes mocks base method.
func (m *MockEntityAttributeQuerier) GetEntityAttributes(ctx context.Context, db repository.DBTX, entityID uuid.UUID) ([]*repository.WorldEntityAttribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityAttributes", ctx, db, entityID)
	ret0, _ := ret[0].([]*repository.WorldEntityAttribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityAttributes indicates an expected call of GetEntityAttributes.
func (mr *MockEntityAttributeQuerierMockRecorder) GetEntityAttributes(ctx, db, entityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityAttributes", reflect.TypeOf((*MockEntityAttributeQuerier)(nil).GetEntityAttributes), ctx, db, entityID)
}

// MockReferenceQuerier is a mock of ReferenceQuerier interface.
type MockReferenceQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockReferenceQuerierMockRecorder
}

// MockReferenceQuerierMockRecorder is the mock recorder for MockReferenceQuerier.
type MockReferenceQuerierMockRecorder struct {
	mock *MockReferenceQuerier
}

// NewMockReferenceQuerier creates a new mock instance.
func NewMockReferenceQuerier(ctrl *gomock.Controller) *MockReferenceQuerier {
	mock := &MockReferenceQuerier{ctrl: ctrl}
	mock.recorder = &MockReferenceQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferenceQuerier) EXPECT() *MockReferenceQuerierMockRecorder {
	return m.recorder
}

// GetEntityChildReferences mocks base method.
func (m *MockReferenceQuerier) GetEntityChildReferences(ctx context.Context, db repository.DBTX, parentID uuid.UUID) ([]*repository.GetEntityChildReferencesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityChildReferences", ctx, db, parentID)
	ret0, _ := ret[0].([]*repository.GetEntityChildReferencesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityChildReferences indicates an expected call of GetEntityChildReferences.
func (mr *MockReferenceQuerierMockRecorder) GetEntityChildReferences(ctx, db, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityChildReferences", reflect.TypeOf((*MockReferenceQuerier)(nil).GetEntityChildReferences), ctx, db, parentID)
}

// GetEntityReference mocks base method.
func (m *MockReferenceQuerier) GetEntityReference(ctx context.Context, db repository.DBTX, id uuid.UUID) (*repository.GetEntityReferenceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityReference", ctx, db, id)
	ret0, _ := ret[0].(*repository.GetEntityReferenceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityReference indicates an expected call of GetEntityReference.
func (mr *MockReferenceQuerierMockRecorder) GetEntityReference(ctx, db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityReference", reflect.TypeOf((*MockReferenceQuerier)(nil).GetEntityReference), ctx, db, id)
}

// GetEntityReferenceByWBRN mocks base method.
func (m *MockReferenceQuerier) GetEntityReferenceByWBRN(ctx context.Context, db repository.DBTX, wbrn string) (*repository.GetEntityReferenceByWBRNRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityReferenceByWBRN", ctx, db, wbrn)
	ret0, _ := ret[0].(*repository.GetEntityReferenceByWBRNRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityReferenceByWBRN indicates an expected call of GetEntityReferenceByWBRN.
func (mr *MockReferenceQuerierMockRecorder) GetEntityReferenceByWBRN(ctx, db, wbrn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityReferenceByWBRN", reflect.TypeOf((*MockReferenceQuerier)(nil).GetEntityReferenceByWBRN), ctx, db, wbrn)
}
