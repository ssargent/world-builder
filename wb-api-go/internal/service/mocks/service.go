// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	repository "github.com/ssargent/world-builder/wb-api-go/internal/repository"
	reflect "reflect"
	time "time"
)

// MockEntityDataProvider is a mock of EntityDataProvider interface
type MockEntityDataProvider struct {
	ctrl     *gomock.Controller
	recorder *MockEntityDataProviderMockRecorder
}

// MockEntityDataProviderMockRecorder is the mock recorder for MockEntityDataProvider
type MockEntityDataProviderMockRecorder struct {
	mock *MockEntityDataProvider
}

// NewMockEntityDataProvider creates a new mock instance
func NewMockEntityDataProvider(ctrl *gomock.Controller) *MockEntityDataProvider {
	mock := &MockEntityDataProvider{ctrl: ctrl}
	mock.recorder = &MockEntityDataProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEntityDataProvider) EXPECT() *MockEntityDataProviderMockRecorder {
	return m.recorder
}

// CreateAttributeDefinition mocks base method
func (m *MockEntityDataProvider) CreateAttributeDefinition(ctx context.Context, db repository.DBTX, arg *repository.CreateAttributeDefinitionParams) (*repository.WorldAttributeDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttributeDefinition", ctx, db, arg)
	ret0, _ := ret[0].(*repository.WorldAttributeDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttributeDefinition indicates an expected call of CreateAttributeDefinition
func (mr *MockEntityDataProviderMockRecorder) CreateAttributeDefinition(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttributeDefinition", reflect.TypeOf((*MockEntityDataProvider)(nil).CreateAttributeDefinition), ctx, db, arg)
}

// GetAttributesForType mocks base method
func (m *MockEntityDataProvider) GetAttributesForType(ctx context.Context, db repository.DBTX, typeID uuid.UUID) ([]*repository.WorldAttributeDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributesForType", ctx, db, typeID)
	ret0, _ := ret[0].([]*repository.WorldAttributeDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributesForType indicates an expected call of GetAttributesForType
func (mr *MockEntityDataProviderMockRecorder) GetAttributesForType(ctx, db, typeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributesForType", reflect.TypeOf((*MockEntityDataProvider)(nil).GetAttributesForType), ctx, db, typeID)
}

// CreateEntityAssociation mocks base method
func (m *MockEntityDataProvider) CreateEntityAssociation(ctx context.Context, db repository.DBTX, arg *repository.CreateEntityAssociationParams) (*repository.WorldEntityAssociation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntityAssociation", ctx, db, arg)
	ret0, _ := ret[0].(*repository.WorldEntityAssociation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntityAssociation indicates an expected call of CreateEntityAssociation
func (mr *MockEntityDataProviderMockRecorder) CreateEntityAssociation(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntityAssociation", reflect.TypeOf((*MockEntityDataProvider)(nil).CreateEntityAssociation), ctx, db, arg)
}

// GetEntityAssociationsForEntity mocks base method
func (m *MockEntityDataProvider) GetEntityAssociationsForEntity(ctx context.Context, db repository.DBTX, entityOne uuid.UUID) ([]*repository.WorldEntityAssociation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityAssociationsForEntity", ctx, db, entityOne)
	ret0, _ := ret[0].([]*repository.WorldEntityAssociation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityAssociationsForEntity indicates an expected call of GetEntityAssociationsForEntity
func (mr *MockEntityDataProviderMockRecorder) GetEntityAssociationsForEntity(ctx, db, entityOne interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityAssociationsForEntity", reflect.TypeOf((*MockEntityDataProvider)(nil).GetEntityAssociationsForEntity), ctx, db, entityOne)
}

// GetEntityAttributes mocks base method
func (m *MockEntityDataProvider) GetEntityAttributes(ctx context.Context, db repository.DBTX, entityID uuid.UUID) ([]*repository.WorldEntityAttribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityAttributes", ctx, db, entityID)
	ret0, _ := ret[0].([]*repository.WorldEntityAttribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityAttributes indicates an expected call of GetEntityAttributes
func (mr *MockEntityDataProviderMockRecorder) GetEntityAttributes(ctx, db, entityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityAttributes", reflect.TypeOf((*MockEntityDataProvider)(nil).GetEntityAttributes), ctx, db, entityID)
}

// CreateEntity mocks base method
func (m *MockEntityDataProvider) CreateEntity(ctx context.Context, db repository.DBTX, arg *repository.CreateEntityParams) (*repository.WorldEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntity", ctx, db, arg)
	ret0, _ := ret[0].(*repository.WorldEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntity indicates an expected call of CreateEntity
func (mr *MockEntityDataProviderMockRecorder) CreateEntity(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntity", reflect.TypeOf((*MockEntityDataProvider)(nil).CreateEntity), ctx, db, arg)
}

// GetEntitiesByParent mocks base method
func (m *MockEntityDataProvider) GetEntitiesByParent(ctx context.Context, db repository.DBTX, parentID uuid.UUID) ([]*repository.WorldEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntitiesByParent", ctx, db, parentID)
	ret0, _ := ret[0].([]*repository.WorldEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntitiesByParent indicates an expected call of GetEntitiesByParent
func (mr *MockEntityDataProviderMockRecorder) GetEntitiesByParent(ctx, db, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntitiesByParent", reflect.TypeOf((*MockEntityDataProvider)(nil).GetEntitiesByParent), ctx, db, parentID)
}

// GetEntitiesByWBRN mocks base method
func (m *MockEntityDataProvider) GetEntitiesByWBRN(ctx context.Context, db repository.DBTX, wbrn string) ([]*repository.WorldEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntitiesByWBRN", ctx, db, wbrn)
	ret0, _ := ret[0].([]*repository.WorldEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntitiesByWBRN indicates an expected call of GetEntitiesByWBRN
func (mr *MockEntityDataProviderMockRecorder) GetEntitiesByWBRN(ctx, db, wbrn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntitiesByWBRN", reflect.TypeOf((*MockEntityDataProvider)(nil).GetEntitiesByWBRN), ctx, db, wbrn)
}

// GetEntity mocks base method
func (m *MockEntityDataProvider) GetEntity(ctx context.Context, db repository.DBTX, id uuid.UUID) (*repository.WorldEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity", ctx, db, id)
	ret0, _ := ret[0].(*repository.WorldEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntity indicates an expected call of GetEntity
func (mr *MockEntityDataProviderMockRecorder) GetEntity(ctx, db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockEntityDataProvider)(nil).GetEntity), ctx, db, id)
}

// GetEntityByWBRN mocks base method
func (m *MockEntityDataProvider) GetEntityByWBRN(ctx context.Context, db repository.DBTX, wbrn string) (*repository.WorldEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityByWBRN", ctx, db, wbrn)
	ret0, _ := ret[0].(*repository.WorldEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByWBRN indicates an expected call of GetEntityByWBRN
func (mr *MockEntityDataProviderMockRecorder) GetEntityByWBRN(ctx, db, wbrn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByWBRN", reflect.TypeOf((*MockEntityDataProvider)(nil).GetEntityByWBRN), ctx, db, wbrn)
}

// CreateEntityHistory mocks base method
func (m *MockEntityDataProvider) CreateEntityHistory(ctx context.Context, db repository.DBTX, arg *repository.CreateEntityHistoryParams) (*repository.WorldEntityHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntityHistory", ctx, db, arg)
	ret0, _ := ret[0].(*repository.WorldEntityHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntityHistory indicates an expected call of CreateEntityHistory
func (mr *MockEntityDataProviderMockRecorder) CreateEntityHistory(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntityHistory", reflect.TypeOf((*MockEntityDataProvider)(nil).CreateEntityHistory), ctx, db, arg)
}

// GetEntityHistory mocks base method
func (m *MockEntityDataProvider) GetEntityHistory(ctx context.Context, db repository.DBTX, entityID uuid.UUID) ([]*repository.WorldEntityHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityHistory", ctx, db, entityID)
	ret0, _ := ret[0].([]*repository.WorldEntityHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityHistory indicates an expected call of GetEntityHistory
func (mr *MockEntityDataProviderMockRecorder) GetEntityHistory(ctx, db, entityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityHistory", reflect.TypeOf((*MockEntityDataProvider)(nil).GetEntityHistory), ctx, db, entityID)
}

// GetEntityChildReferences mocks base method
func (m *MockEntityDataProvider) GetEntityChildReferences(ctx context.Context, db repository.DBTX, parentID uuid.UUID) ([]*repository.GetEntityChildReferencesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityChildReferences", ctx, db, parentID)
	ret0, _ := ret[0].([]*repository.GetEntityChildReferencesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityChildReferences indicates an expected call of GetEntityChildReferences
func (mr *MockEntityDataProviderMockRecorder) GetEntityChildReferences(ctx, db, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityChildReferences", reflect.TypeOf((*MockEntityDataProvider)(nil).GetEntityChildReferences), ctx, db, parentID)
}

// GetEntityReference mocks base method
func (m *MockEntityDataProvider) GetEntityReference(ctx context.Context, db repository.DBTX, id uuid.UUID) (*repository.GetEntityReferenceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityReference", ctx, db, id)
	ret0, _ := ret[0].(*repository.GetEntityReferenceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityReference indicates an expected call of GetEntityReference
func (mr *MockEntityDataProviderMockRecorder) GetEntityReference(ctx, db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityReference", reflect.TypeOf((*MockEntityDataProvider)(nil).GetEntityReference), ctx, db, id)
}

// GetEntityReferenceByWBRN mocks base method
func (m *MockEntityDataProvider) GetEntityReferenceByWBRN(ctx context.Context, db repository.DBTX, wbrn string) (*repository.GetEntityReferenceByWBRNRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityReferenceByWBRN", ctx, db, wbrn)
	ret0, _ := ret[0].(*repository.GetEntityReferenceByWBRNRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityReferenceByWBRN indicates an expected call of GetEntityReferenceByWBRN
func (mr *MockEntityDataProviderMockRecorder) GetEntityReferenceByWBRN(ctx, db, wbrn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityReferenceByWBRN", reflect.TypeOf((*MockEntityDataProvider)(nil).GetEntityReferenceByWBRN), ctx, db, wbrn)
}

// CreateType mocks base method
func (m *MockEntityDataProvider) CreateType(ctx context.Context, db repository.DBTX, arg *repository.CreateTypeParams) (*repository.WorldType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateType", ctx, db, arg)
	ret0, _ := ret[0].(*repository.WorldType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateType indicates an expected call of CreateType
func (mr *MockEntityDataProviderMockRecorder) CreateType(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateType", reflect.TypeOf((*MockEntityDataProvider)(nil).CreateType), ctx, db, arg)
}

// GetTypeByID mocks base method
func (m *MockEntityDataProvider) GetTypeByID(ctx context.Context, db repository.DBTX, id uuid.UUID) (*repository.WorldType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypeByID", ctx, db, id)
	ret0, _ := ret[0].(*repository.WorldType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTypeByID indicates an expected call of GetTypeByID
func (mr *MockEntityDataProviderMockRecorder) GetTypeByID(ctx, db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypeByID", reflect.TypeOf((*MockEntityDataProvider)(nil).GetTypeByID), ctx, db, id)
}

// GetTypeByWBTN mocks base method
func (m *MockEntityDataProvider) GetTypeByWBTN(ctx context.Context, db repository.DBTX, wbtn string) (*repository.WorldType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypeByWBTN", ctx, db, wbtn)
	ret0, _ := ret[0].(*repository.WorldType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTypeByWBTN indicates an expected call of GetTypeByWBTN
func (mr *MockEntityDataProviderMockRecorder) GetTypeByWBTN(ctx, db, wbtn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypeByWBTN", reflect.TypeOf((*MockEntityDataProvider)(nil).GetTypeByWBTN), ctx, db, wbtn)
}

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockCache) Get(k string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", k)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCacheMockRecorder) Get(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), k)
}

// Set mocks base method
func (m *MockCache) Set(k string, x interface{}, d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", k, x, d)
}

// Set indicates an expected call of Set
func (mr *MockCacheMockRecorder) Set(k, x, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), k, x, d)
}
